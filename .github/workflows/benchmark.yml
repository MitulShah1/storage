on:
  push:
    branches:
      - master
      - main
    paths:
      - "**"
      - "!**.md"
  pull_request:
    paths:
      - "**"
      - "!**.md"

permissions:
  deployments: write
  contents: write

name: Benchmark
jobs:
  detect-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modified-modules.outputs.modules }}
      modules_count: ${{ steps.set-modified-modules-count.outputs.modules_count }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - id: changed-files
        name: Get changed files
        uses: tj-actions/changed-files@4edd678ac3f81e2dc578756871e4d00c19191daf # v45.0.4

      - id: set-modified-modules
        name: Set all modified modules
        env:
          ALL_CHANGED_FILES: "${{ steps.changed-files.outputs.all_changed_files }}"
        run: echo "modules=$(./.github/scripts/changed-modules.sh)" >> $GITHUB_OUTPUT

      - id: set-modified-modules-count
        name: Set all modified modules count
        run: echo "modules_count=$(echo ${{ toJSON(steps.set-modified-modules.outputs.modules) }} | jq '. | length')" >> $GITHUB_OUTPUT

      - name: Print out the modules to be used
        run: |
          echo "${{ steps.set-modified-modules-count.outputs.modules_count }} modules in the build"
          echo "${{ steps.set-modified-modules.outputs.modules }}"

  Compare:
    needs:
      - detect-modules
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
      fail-fast: false
    runs-on: ubuntu-latest
    services:
      arangodb:
        image: 'arangodb:latest'
        env:
          ARANGO_NO_AUTH: 1
        ports:
          - '8529:8529'
      dynamodb:
        image: 'amazon/dynamodb-local:latest'
        ports:
          - '8000:8000'
      memcached:
        image: 'memcached:latest'
        ports:
          - '11211:11211'
      mongo:
        image: 'mongo:latest'
        ports:
          - '27017:27017'
      mssql:
        image: 'mcmoe/mssqldocker:latest'
        ports:
          - '1433:1433'
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: MsSql!1234
          MSSQL_DB: master
          MSSQL_USER: sa
          MSSQL_PASSWORD: MsSql!1234
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null"
          --health-interval 1s
          --health-timeout 30s
          --health-start-period 10s
          --health-retries 20
      mysql:
        image: 'mysql:latest'
        env:
          MYSQL_DATABASE: fiber
          MYSQL_USER: username
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password
        ports:
          - '3306:3306'
        options: >-
          --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout
          5s --health-retries 5
      postgres:
        image: 'postgres:latest'
        ports:
          - '5432:5432'
        env:
          POSTGRES_DB: fiber
          POSTGRES_USER: username
          POSTGRES_PASSWORD: "pass#w%rd"
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          # NOTE: Keep this in sync with the version from go.mod
          go-version: "1.21.x"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Azurite
        if: ${{ matrix.module == 'azureblob' }}
        run: |
          docker run -d -p 10000:10000 mcr.microsoft.com/azure-storage/azurite azurite-blob --blobHost 0.0.0.0 --blobPort 10000

      - name: Install Cloudflare Worker
        if: ${{ matrix.module == 'cloudflarekv' }}
        run : |
          .github/scripts/initialize-wrangler.sh
          cd cloudflarekv && npx wrangler dev &
          npx wait-on tcp:8787

      - name: Install Coherence
        if: ${{ matrix.module == 'coherence' }}
        run: |
          docker run -d -p 1408:1408 -p 30000:30000 ghcr.io/oracle/coherence-ce:22.06.5
          sleep 30

      - name: Install etcd
        if: ${{ matrix.module == 'etcd' }}
        run: |
          docker run -d --name Etcd-server \
            --publish 2379:2379 \
            --publish 2380:2380 \
            --env ALLOW_NONE_AUTHENTICATION=yes \
            --env ETCD_ADVERTISE_CLIENT_URLS=http://etcd-server:2379 \
            bitnami/etcd:latest

      - name: Install ScyllaDb
        if: ${{ matrix.module == 'scylladb' }}
        run: |
          docker run --name scylladb -p 9042:9042 -p 19042:19042 -p 9160:9160 -p 7000:7000 -p 7001:7001 -p 7199:7199 -p 9180:9180 -d scylladb/scylla:latest --broadcast-address 127.0.0.1 --listen-address 0.0.0.0 --broadcast-rpc-address 127.0.0.1
          sleep 15 # Wait for ScyllaDb to initialize

      - name: Setup Redis
        if: ${{ matrix.module == 'redis' }}
        uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: '7.x'
          auto-start: 'false'

      - name: Run Redis
        if: ${{ matrix.module == 'redis' }}
        run: |
          redis-server --port 6379 &

      - name: Run NATS
        if: ${{ matrix.module == 'nats' }}
        run: |
          ./.github/scripts/gen-test-certs.sh
          docker run -d --name nats-jetstream -p 4443:4443 -v ./nats/testdata:/testdata -v ./tls:/tls nats:latest --jetstream -c /testdata/nats-tls.conf
          sleep 2

      - name: Run Benchmarks
        working-directory: ${{ matrix.module }}
        run: |
          set -o pipefail
          echo "Bench dir: ${{ matrix.module }}"
          go test ./... -benchmem -run=^$ -bench . | tee -a output.txt
        shell: bash
        env:
          MSSQL_DATABASE: master
          MSSQL_USERNAME: sa
          MSSQL_PASSWORD: MsSql!1234
          MYSQL_USERNAME: username
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: fiber
          POSTGRES_DATABASE: fiber
          POSTGRES_USERNAME: username
          POSTGRES_PASSWORD: "pass#w%rd"
          TEST_CLICKHOUSE_IMAGE: "clickhouse/clickhouse-server:23-alpine"
          TEST_COUCHBASE_IMAGE: "couchbase:enterprise-7.1.1"
          TEST_MINIO_IMAGE: "docker.io/minio/minio:RELEASE.2024-08-17T01-24-54Z"

      - name: Get Previous Benchmark Results
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark-${{ matrix.module }}

      - name: Save Benchmark Results
        uses: benchmark-action/github-action-benchmark@v1.20.4
        with:
          tool: "go"
          output-file-path: ${{ matrix.module }}/output.txt
          github-token: ${{ secrets.BENCHMARK_TOKEN }}
          benchmark-data-dir-path: "benchmarks"
          alert-threshold: "300%"
          fail-on-alert: true
          comment-on-alert: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          #summary-always: ${{ github.event_name != 'push' && github.event_name != 'workflow_dispatch' }}
          auto-push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          save-data-file: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
